// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: another-artifact-spec/proto/api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AnotherArtifactService_ListStories_FullMethodName   = "/pb.AnotherArtifactService/ListStories"
	AnotherArtifactService_SynchronizeOn_FullMethodName = "/pb.AnotherArtifactService/SynchronizeOn"
)

// AnotherArtifactServiceClient is the client API for AnotherArtifactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnotherArtifactServiceClient interface {
	ListStories(ctx context.Context, in *ListStoriesRequest, opts ...grpc.CallOption) (*ListStoriesResponse, error)
	SynchronizeOn(ctx context.Context, in *SynchronizeStoriesRequest, opts ...grpc.CallOption) (*SynchronizeStoriesResponse, error)
}

type anotherArtifactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnotherArtifactServiceClient(cc grpc.ClientConnInterface) AnotherArtifactServiceClient {
	return &anotherArtifactServiceClient{cc}
}

func (c *anotherArtifactServiceClient) ListStories(ctx context.Context, in *ListStoriesRequest, opts ...grpc.CallOption) (*ListStoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoriesResponse)
	err := c.cc.Invoke(ctx, AnotherArtifactService_ListStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anotherArtifactServiceClient) SynchronizeOn(ctx context.Context, in *SynchronizeStoriesRequest, opts ...grpc.CallOption) (*SynchronizeStoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SynchronizeStoriesResponse)
	err := c.cc.Invoke(ctx, AnotherArtifactService_SynchronizeOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnotherArtifactServiceServer is the server API for AnotherArtifactService service.
// All implementations must embed UnimplementedAnotherArtifactServiceServer
// for forward compatibility
type AnotherArtifactServiceServer interface {
	ListStories(context.Context, *ListStoriesRequest) (*ListStoriesResponse, error)
	SynchronizeOn(context.Context, *SynchronizeStoriesRequest) (*SynchronizeStoriesResponse, error)
	mustEmbedUnimplementedAnotherArtifactServiceServer()
}

// UnimplementedAnotherArtifactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnotherArtifactServiceServer struct {
}

func (UnimplementedAnotherArtifactServiceServer) ListStories(context.Context, *ListStoriesRequest) (*ListStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStories not implemented")
}
func (UnimplementedAnotherArtifactServiceServer) SynchronizeOn(context.Context, *SynchronizeStoriesRequest) (*SynchronizeStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizeOn not implemented")
}
func (UnimplementedAnotherArtifactServiceServer) mustEmbedUnimplementedAnotherArtifactServiceServer() {
}

// UnsafeAnotherArtifactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnotherArtifactServiceServer will
// result in compilation errors.
type UnsafeAnotherArtifactServiceServer interface {
	mustEmbedUnimplementedAnotherArtifactServiceServer()
}

func RegisterAnotherArtifactServiceServer(s grpc.ServiceRegistrar, srv AnotherArtifactServiceServer) {
	s.RegisterService(&AnotherArtifactService_ServiceDesc, srv)
}

func _AnotherArtifactService_ListStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherArtifactServiceServer).ListStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnotherArtifactService_ListStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherArtifactServiceServer).ListStories(ctx, req.(*ListStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnotherArtifactService_SynchronizeOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynchronizeStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherArtifactServiceServer).SynchronizeOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnotherArtifactService_SynchronizeOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherArtifactServiceServer).SynchronizeOn(ctx, req.(*SynchronizeStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnotherArtifactService_ServiceDesc is the grpc.ServiceDesc for AnotherArtifactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnotherArtifactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AnotherArtifactService",
	HandlerType: (*AnotherArtifactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStories",
			Handler:    _AnotherArtifactService_ListStories_Handler,
		},
		{
			MethodName: "SynchronizeOn",
			Handler:    _AnotherArtifactService_SynchronizeOn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "another-artifact-spec/proto/api.proto",
}
